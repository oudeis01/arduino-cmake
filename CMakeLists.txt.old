cmake_minimum_required(VERSION 3.20)

# 보드 선택 옵션 (명령행에서 -DTARGET_BOARD=<board_name>으로 설정 가능)
set(TARGET_BOARD "arduino_uno" CACHE STRING "Target board (arduino_uno | klst_panda)")

# 소스 디렉토리 옵션
set(SOURCE_DIR "src" CACHE STRING "Source directory")

# 지원되는 보드 목록
set(SUPPORTED_BOARDS arduino_uno klst_panda)

# 보드 유효성 검사
if(NOT TARGET_BOARD IN_LIST SUPPORTED_BOARDS)
    message(FATAL_ERROR "Unsupported board: ${TARGET_BOARD}. Supported boards: ${SUPPORTED_BOARDS}")
endif()

message(STATUS "Building for target board: ${TARGET_BOARD}")

# 보드별 설정 로드
if(TARGET_BOARD STREQUAL "arduino_uno")
    include(cmake/boards/arduino_uno.cmake)
elseif(TARGET_BOARD STREQUAL "klst_panda")
    include(cmake/boards/klst_panda.cmake)
endif()

# 프로젝트 선언
project(${PROJECT_NAME} C CXX ASM)

# 공통 컴파일 옵션
set(CMAKE_C_STANDARD 17)
set(CMAKE_CXX_STANDARD 17)

# 빌드 타입이 지정되지 않았으면 Release로 설정
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# 공통 소스 파일들
file(GLOB_RECURSE COMMON_SOURCES
    "${SOURCE_DIR}/*.c"
    "${SOURCE_DIR}/*.cpp"
    "${SOURCE_DIR}/*.S"
)

# 보드별 소스 파일들
file(GLOB_RECURSE BOARD_SOURCES
    "boards/${TARGET_BOARD}/*.c"
    "boards/${TARGET_BOARD}/*.cpp"
    "boards/${TARGET_BOARD}/*.S"
)

# 실행 파일 생성
add_executable(${PROJECT_NAME}
    ${COMMON_SOURCES}
    ${BOARD_SOURCES}
    ${BOARD_CORE_SOURCES}
)

# 보드별 컴파일 정의, 인클루드 경로, 링크 옵션 적용
target_compile_definitions(${PROJECT_NAME} PRIVATE ${BOARD_COMPILE_DEFINITIONS})
target_include_directories(${PROJECT_NAME} PRIVATE ${BOARD_INCLUDE_DIRECTORIES})
target_compile_options(${PROJECT_NAME} PRIVATE ${BOARD_COMPILE_OPTIONS})
target_link_options(${PROJECT_NAME} PRIVATE ${BOARD_LINK_OPTIONS})

# 보드별 라이브러리 링크
if(BOARD_LIBRARIES)
    target_link_libraries(${PROJECT_NAME} ${BOARD_LIBRARIES})
endif()

# 보드별 후처리 작업 (hex, bin 파일 생성 등)
if(COMMAND board_post_build)
    board_post_build(${PROJECT_NAME})
endif()

# 빌드 정보 출력
message(STATUS "Project: ${PROJECT_NAME}")
message(STATUS "Board: ${TARGET_BOARD}")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Toolchain: ${CMAKE_TOOLCHAIN_FILE}")